def precedence(operator):
    if operator == '+' or operator == '-':
        return 1
    elif operator == '*' or operator == '/':
        return 2
    else:
        return 0  # untuk kurung buka/tutup

def infix_to_postfix(expression):
    postfix = ""
    stack = []
    operators = set(['+', '-', '*', '/'])

    for char in expression:
        if char.isalnum():  # operand
            postfix += char
        elif char == '(':
            stack.append(char)
        elif char == ')':
            while stack and stack[-1] != '(':
                postfix += stack.pop()
            stack.pop()  # pop kurung buka dari stack
        elif char in operators:  # operator
            while stack and precedence(stack[-1]) >= precedence(char):
                postfix += stack.pop()
            stack.append(char)

    while stack:
        postfix += stack.pop()

    return postfix

# Mengambil ekspresi infix dari input pengguna
infix_expression = input("Masukkan ekspresi infix: ")
postfix_expression = infix_to_postfix(infix_expression)
print("Ekspresi postfix:", postfix_expression)
